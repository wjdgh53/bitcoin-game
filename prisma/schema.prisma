// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Bitcoin price data model
model BitcoinPrice {
  id                    Int      @id @default(autoincrement())
  timestamp            DateTime @default(now())
  price                Float
  volume               Float?
  marketCap            Float?
  change24h            Float?
  changePercentage24h  Float?
  high24h              Float?
  low24h               Float?
  source               String   @default("coingecko")
  
  @@map("bitcoin_prices")
}

// User portfolio model (simplified)
model Portfolio {
  id              Int      @id @default(autoincrement())
  userId          String   @unique @default("demo-user")
  balance         Float    @default(10000.0)
  bitcoinHoldings Float    @default(0.0)
  totalValue      Float    @default(10000.0)
  profit          Float    @default(0.0)
  profitPercentage Float   @default(0.0)
  lastUpdated     DateTime @default(now())
  
  @@map("portfolios")
}

// Trade history model
model Trade {
  id        Int       @id @default(autoincrement())
  userId    String    @default("demo-user")
  type      String    // 'buy' or 'sell'
  amount    Float     // Amount of BTC
  price     Float     // Price per BTC at time of trade
  total     Float     // Total USD amount
  timestamp DateTime  @default(now())
  
  @@map("trades")
}

// AI Agent model
model Agent {
  id                String   @id @default(cuid())
  name              String   @unique
  type              String   @unique
  personality       String   // conservative, aggressive, balanced, quantitative, contrarian
  strategy          String   // JSON array of strategies (keeping column name for compatibility)
  description       String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  patterns          Pattern[]
  watchlistItems    AgentWatchlistItem[]
  chatMessages      ChatMessage[]
  
  @@map("agents")
}

// Trading patterns for AI agents
model Pattern {
  id             String   @id @default(cuid())
  agentId        String
  name           String
  description    String
  priority       Int      @default(1) // 1 = highest priority, 10 = lowest
  confidenceRate Float    @default(0.0) // 0-100%
  examples       String   @default("[]") // JSON array of examples
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@index([agentId])
  @@index([priority])
  @@map("patterns")
}

// Agent-specific watchlist for monitoring specific cryptocurrencies
model AgentWatchlistItem {
  id             String   @id @default(cuid())
  agentId        String
  symbol         String   // e.g., 'BTC', 'ETH'
  name           String   // e.g., 'Bitcoin', 'Ethereum'
  category       String   // '장기투자', '단기트레이딩', '모멘텀' etc.
  reason         String   // Why the agent is interested in this asset
  agentView      String   // Agent's perspective/prediction on the asset
  alertPrice     Float?   // Price threshold for alerts
  alertType      String?  // 'above', 'below', 'both'
  isActive       Boolean  @default(true)
  addedAt        DateTime @default(now())
  lastReviewedAt DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@index([agentId])
  @@index([symbol])
  @@index([category])
  @@map("agent_watchlist_items")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  tradingNotes TradingNote[]
  watchlistItems WatchlistItem[]
  
  @@map("users")
}

// Trading Notes model
model TradingNote {
  id             String   @id @default(cuid())
  userId         String
  title          String
  content        String
  tags           String   @default("") // JSON array as string
  bitcoinPrice   Float?
  priceChange24h Float?
  sentiment      String?  // 'bullish', 'bearish', 'neutral'
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@index([sentiment])
  @@map("trading_notes")
}

// Watchlist model for tracking cryptocurrency interests
model WatchlistItem {
  id             String   @id @default(cuid())
  userId         String
  symbol         String   // e.g., 'BTC', 'ETH'
  name           String   // e.g., 'Bitcoin', 'Ethereum'
  alertPrice     Float?   // Price threshold for alerts
  alertType      String?  // 'above', 'below', 'both'
  notes          String?  // User notes about the asset
  tags           String   @default("") // JSON array as string
  alertTriggered Boolean  @default(false)
  lastAlertAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([symbol])
  @@index([alertPrice])
  @@map("watchlist_items")
}

// AI Analysis Reports model
model AnalysisReport {
  id                String    @id
  agentName         String
  agentType         String
  timestamp         DateTime  @default(now())
  recommendation    String    // 'buy', 'sell', 'hold'
  confidence        Float
  title             String
  executiveSummary  String
  marketAnalysis    String
  technicalAnalysis String
  riskAssessment    String
  strategyRationale String
  nextSteps         String
  currentPrice      Float
  priceChange24h    Float
  trend             String
  momentum          Float
  support           Float
  resistance        Float
  
  @@map("analysis_reports")
}

// Chat Messages model for agent conversations
model ChatMessage {
  id        String   @id @default(cuid())
  agentId   String
  userId    String   @default("demo-user")
  content   String
  type      String   // 'user', 'agent', 'system'
  metadata  String   @default("{}") // JSON for attachments, modifications, etc.
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@index([agentId])
  @@index([userId])
  @@index([createdAt])
  @@index([type])
  @@map("chat_messages")
}

// News Article model
model NewsArticle {
  id              String   @id @default(cuid())
  title           String
  content         String
  source          String
  url             String?
  publishedAt     DateTime
  sentimentScore  Float    @default(0.0) // -1 to 1
  importanceScore Int      @default(5)   // 1 to 10
  category        String   // 'technical', 'regulatory', 'market', 'corporate'
  relatedSymbols  String   @default("[]") // JSON array of symbols
  summary         String?
  aiAnalysis      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([category])
  @@index([publishedAt])
  @@index([sentimentScore])
  @@index([importanceScore])
  @@map("news_articles")
}

// News Report model for daily/weekly summaries
model NewsReport {
  id               String        @id @default(cuid())
  type             String        // 'daily' or 'weekly'
  date             DateTime
  overallSentiment Float         @default(0.0) // -1 to 1
  marketTrend      String        // 'bullish', 'bearish', 'neutral'
  keyEvents        String        @default("[]") // JSON array of key events
  summary          String
  topStoriesIds    String        @default("[]") // JSON array of NewsArticle IDs
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  @@index([type])
  @@index([date])
  @@map("news_reports")
}
